<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <description>
        Example for a Composite Itemreader which reads from multiple JDBC Readers
        with different DataSources at once (not one after another (sequentially) 
        like the MultiResourceItemReader) and delegates all read items to one 
        unifying mapper.
    </description>
    <!-- 
        inline xmlns, otherwise it would look like 'batch:job, batch:step, etc.' 
    -->
    <job id="compositeJdbcReaderJob" xmlns="http://www.springframework.org/schema/batch">
        <step id="compositeJdbcReaderStep">
            <tasklet>
                <chunk reader="compositeItemReader" writer="itemWriter" commit-interval="5" /> 
            </tasklet>
        </step>
    </job>


    <bean id="compositeItemReader" class="de.langmi.spring.batch.examples.readers.support.CompositeCursorItemReader">
        <property name="unifyingMapper">
            <bean class="de.langmi.spring.batch.examples.readers.support.DefaultUnifyingStringItemsMapper" />
        </property>
        <property name="cursorItemReaders">
            <list>
                <ref bean="itemReader1" />
                <ref bean="itemReader2" />                 
            </list>
        </property>
    </bean>

    <bean id="itemReader1" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSourceReader1" />
        <property name="name" value="itemReader1" />
        <property name="saveState" value="true" />
        <property name="sql">
            <value>
                <![CDATA[
                    SELECT ID,NAME FROM TEST
                ]]>
            </value>
        </property>
        <property name="rowMapper" ref="rowMapper" />
    </bean>

    <bean id="itemReader2" class="org.springframework.batch.item.database.JdbcCursorItemReader">
        <property name="dataSource" ref="dataSourceReader2" />
        <property name="name" value="itemReader2" />
        <property name="saveState" value="true" />
        <property name="sql">
            <value>
                <![CDATA[
                    SELECT ID,NAME FROM TEST
                ]]>
            </value>
        </property>
        <property name="rowMapper" ref="rowMapper" />
    </bean>

    <bean id="rowMapper" class="de.langmi.spring.batch.examples.readers.jdbc.StringRowMapper" />

    <bean id="itemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="#{jobParameters['output.file']}" />
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.PassThroughLineAggregator"/>
        </property>
    </bean>


    <bean id="dataSourceReader1" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver" />
        <property name="url" value="jdbc:hsqldb:mem:testdbreaderone" />
        <property name="username" value="sa" />
        <property name="password" value="" />
    </bean>

    <bean id="dataSourceReader2" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver" />
        <property name="url" value="jdbc:hsqldb:mem:testdbreadertwo" />
        <property name="username" value="sa" />
        <property name="password" value="" />
    </bean>

</beans>

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

    <description>
        Example for http://forum.springsource.org/showthread.php?115064-How-to-escape-\n-in-flat-file
        
            "process csv flat files, the line separator is \n, but certain data fields in the file can contain \n too"
        
        Reads from a file where each "line" consists of items which contain line endings,
        thus one "line" is spanned over multiple real lines.
        
        Can be made generic quite easily, just use a (Job)Parameter for the count in 
        FieldCountItemReader.
    </description>
    <!-- 
        inline xmlns, otherwise it would look like 'batch:job, batch:step, etc.' 
    -->
    <job id="fieldCountItemReaderJob" xmlns="http://www.springframework.org/schema/batch">
        <step id="fieldCountItemReaderStep">
            <tasklet>
                <chunk reader="itemReader" writer="itemWriter"  commit-interval="5">
                    <streams>
                        <stream ref="fileItemReader" />
                    </streams>                        
                </chunk>
            </tasklet>
        </step>
    </job>

    <bean id="itemReader" class="de.langmi.spring.batch.examples.readers.file.fieldcount.FieldCountItemReader">
        <property name="delegate" ref="fileItemReader" />
        <property name="count" value="3" />
    </bean>

    <bean id="fileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="#{jobParameters['input.file']}" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer" />
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>
            </bean>
        </property>
        <property name="strict" value="true" />
    </bean>

    <bean id="itemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
        <property name="resource" value="#{jobParameters['output.file']}" />
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.PassThroughFieldExtractor" />
                </property>
            </bean>
        </property>
    </bean>

</beans>
